package{    import away3d.containers.View3D;    import away3d.core.managers.Stage3DManager;    import away3d.core.managers.Stage3DProxy;	import away3d.entities.*;	import away3d.materials.*;	import away3d.textures.*;	import away3d.primitives.*;    import com.in2ar.away3d.Away3DCameraLens;    import com.in2ar.away3d.Away3DCaptureTexture;    import com.in2ar.calibration.IntrinsicParameters;    import com.in2ar.detect.IN2ARReference;    import com.in2ar.event.IN2ARDetectionEvent;		import com.in2ar.button.*;		    import flash.display.BitmapData;    import flash.events.Event;    import flash.geom.Matrix;    import flash.geom.Vector3D;    import flash.media.Video;    import flash.text.TextField;    import flash.text.TextFormat;    import flash.utils.ByteArray;		import flash.display.Sprite;	import flash.events.AsyncErrorEvent;	import flash.events.IOErrorEvent;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;    /**     * Simple Away3D + IN2AR demo     * You can switch base class to compile for FLASH/AIR(ANE)     * @author Eugene Zatepyakin     */    [SWF(width='640', height='480', frameRate='30',backgroundColor='0xFFFFFF')]    public final class Away3DDemo extends /* IN2ARNativeBase */  IN2ARBase    {        // tracking data file        [Embed(source="../assets/def_data.ass", mimeType="application/octet-stream")]        public static const DefinitionaData:Class;		[Embed(source="../barsandtone.flv", mimeType="application/octet-stream")]		public static const videoData:Class;        // asfeat variables        public var intrinsic:IntrinsicParameters;        public var maxPoints:int = 300; // max points to allow to detect        public var maxReferences:int = 1; // max objects will be used        public var maxTrackIterations:int = 5; // track iterations        // different visual objects        private var video:Video;        private var cameraBuffer:BitmapData;        private var workBuffer:BitmapData;        private var cameraMatrix:Matrix;        public static var text:TextField;        // 3d stuff        private var stage3DManager:Stage3DManager;        private var stage3DProxy:Stage3DProxy;        private var away3dView:View3D;        private var away3dLens:Away3DCameraLens;        private var away3dCapture:Away3DCaptureTexture;        private var in2arModel:IN2ARLogoModel;		private var planeMesh:Mesh;        // camera and viewport options        public var streamW:int = 640;        public var streamH:int = 480;        public var streamFPS:int = 30;        public var downScaleRatio:Number = 1;        public var workW:int = streamW * downScaleRatio;        public var workH:int = streamH * downScaleRatio;        public var viewWidth:int = 640;        public var viewHeight:int = 480;        public var mirror:Boolean = true; // mirror camera output        public function Away3DDemo()        {            addEventListener(Event.INIT, initIN2AR);            super();        }        private function initIN2AR(e:Event = null):void        {            removeEventListener(Event.INIT, initIN2AR);            // init our engine            in2arLib.init( workW, workH, maxPoints, maxReferences, 100, stage );            // indexing reference data will result in huge            // speed up during matching (see docs for more info)            // !!! u always need to setup indexing even if u dont plan to use it !!!            in2arLib.setupIndexing(12, 10, true);            // but u can switch it off if u want            in2arLib.setUseLSHDictionary(true);            in2arLib.addReferenceObject( ByteArray( new DefinitionaData ) );            // ATTENTION            // limit the amount of references to be detected per frame            // if u have only one reference u can skip this option            in2arLib.setMaxReferencesPerFrame(1);            intrinsic = in2arLib.getIntrinsicParams();			//testVideo();			//return;			            initCamera();            initAway3D();            initText();            initListeners();        }		private function testVideo():void		{		    var _nsClient = {};			_nsClient["onCuePoint"] = metaDataHandler;			_nsClient["onMetaData"] = metaDataHandler;			_nsClient["onBWDone"] = onBWDone;			_nsClient["close"] = streamClose;						var _nc:NetConnection = new NetConnection();			_nc.client = _nsClient;			_nc.addEventListener(NetStatusEvent.NET_STATUS,                 netStatusHandler, false, 0, true);			_nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler, false, 0, true);			_nc.addEventListener(IOErrorEvent.IO_ERROR,                     ioErrorHandler, false, 0, true);			_nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR,               asyncErrorHandler, false, 0, true);			_nc.connect(null);						// NetStream			var _ns:NetStream = new NetStream(_nc);			_ns.checkPolicyFile = true;			_ns.client = _nsClient;			_ns.addEventListener(NetStatusEvent.NET_STATUS,         netStatusHandler, false, 0, true);			_ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR,       asyncErrorHandler, false, 0, true);			_ns.addEventListener(IOErrorEvent.IO_ERROR,             ioErrorHandler, false, 0, true);									var _src="http://10.60.2.133/Desktop/flash/test/testIN2AR/assets/barsandtone.flv";			//_ns.play(_src);			//_ns.close();					}		private function asyncErrorHandler(event:AsyncErrorEvent): void		{		// Must be present to prevent errors, but won't do anything		trace("asyncErrorHandler");		}				private function metaDataHandler(oData:Object = null):void		{		// Offers info such as oData.duration, oData.width, oData.height, oData.framerate and more (if encoded into the FLV)		//this.dispatchEvent( new VideoEvent(VideoEvent.METADATA,_netStream,file,oData) );		trace("metaDataHandler");		}				private function ioErrorHandler(e:IOErrorEvent):void		{		trace("An IOerror occured: "+e.text);		}				private function securityErrorHandler(e:SecurityErrorEvent):void		{		trace("A security error occured: "+e.text+" Remember that the FLV must be in the same security sandbox as your SWF.");		}				private function onBWDone():void		{		// Must be present to prevent errors for RTMP, but won't do anything		}		private function streamClose():void		{		trace("The stream was closed. Incorrect URL?");		}						private function netStatusHandler(e:NetStatusEvent):void		{		switch (e.info["code"]) {				case "NetStream.Play.Stop": 						//this.dispatchEvent( new VideoEvent(VideoEvent.STOP,_netStream, file) ); 						trace("netStatusHandler Play.Stop");						break;				case "NetStream.Play.Play":						//this.dispatchEvent( new VideoEvent(VideoEvent.PLAY,_netStream, file) );						trace("netStatusHandler Play.Play");						break;				case "NetStream.Play.StreamNotFound":						trace("netStatusHandler Play.StreamNotFound");						break;				case "NetConnection.Connect.Success":						trace("netStatusHandler Connect.Success");						break;		}		}				////////////        private function initAway3D():void        {            away3dView = new View3D();            away3dView.width = viewWidth;            away3dView.height = viewHeight;            away3dLens = new Away3DCameraLens();            away3dLens.updateProjection(intrinsic.fx, intrinsic.fy, viewWidth, viewHeight, workW, workH);            away3dView.camera.lens = away3dLens;            away3dView.camera.position = new Vector3D(0,0,0);            // init webcam texture            away3dCapture = new Away3DCaptureTexture(cameraBuffer);            away3dCapture.mirror = mirror;            away3dView.background = away3dCapture;            // init model            in2arModel = new IN2ARLogoModel();            away3dView.scene.addChild(in2arModel);			trace(123);			var vt:VideoTexture= new VideoTexture(null,512,512);			vt.autoPlay=true;			vt.autoUpdate=true;			vt.player.source="http://10.60.2.133/Desktop/flash/test/testIN2AR/assets/barsandtone.flv";			//vt.player.source="http://10.60.2.133/Desktop/flash/test/testIN2AR/trailer.webm";			trace("playing="+vt.player.playing);			vt.player.play();			trace("playing="+vt.player.playing);			trace("source="+vt.player.source);			var tm:TextureMaterial = new TextureMaterial(vt);						var planeGeom:PlaneGeometry = new PlaneGeometry(10.24, 5.12, 1, 1, false);//same ratio as flv			planeMesh = new Mesh(planeGeom, tm);			planeMesh.position=new Vector3D(0,0,50);			away3dView.scene.addChild(planeMesh);												            addChild(away3dView);        }        private function initText():void        {            // DEBUG TEXT FIELD            text = new TextField();            text.defaultTextFormat = new TextFormat("Verdana", 11, 0xFFFFFF);            text.background = true;            text.backgroundColor = 0x000000;            text.textColor = 0xFFFFFF;            text.width = 640;            text.height = 18;            text.selectable = false;            text.mouseEnabled = false;            text.y = stage.stageHeight - text.height;            addChild(text);        }        private function initListeners():void        {            in2arLib.addListener(IN2ARDetectionEvent.DETECTED, onModelDetected);            in2arLib.addListener(IN2ARDetectionEvent.FAILED, onDetectionFailed);            addEventListener(Event.ENTER_FRAME, onEnterFrame);        }        private function onEnterFrame(e:Event = null):void        {            if(cameraBuffer){                cameraBuffer.draw(video);                if(downScaleRatio != 1){                    workBuffer.draw(cameraBuffer, cameraMatrix);                    // run in2ar                    in2arLib.detect(workBuffer);                } else {                    // run in2ar                    in2arLib.detect(cameraBuffer);                }                away3dCapture.invalidate();            }            away3dView.render();        }        private function onModelDetected(e:IN2ARDetectionEvent):void        {            var refList:Vector.<IN2ARReference> = e.detectedReferences;            var ref:IN2ARReference;            var n:int = e.detectedReferencesCount;            var state:String;            for(var i:int = 0; i < n; ++i) {                ref = refList[i];                state = ref.detectType;                in2arModel.in2arTransform(ref.rotationMatrix, ref.translationVector, 0.8, mirror);								                text.text = state;                text.appendText( ' @ ' + ref.id );                if(state == '_detect')                    text.appendText( ' :: matched: ' + ref.matchedPointsCount );            }        }        private function onDetectionFailed(e:IN2ARDetectionEvent):void        {            text.text = "nothing found";            in2arModel.lost();        }        protected function initCamera():void        {            var camera:flash.media.Camera = flash.media.Camera.getCamera();            camera.setMode(streamW, streamH, streamFPS, false);            video = new Video(camera.width, camera.height);            video.attachCamera(camera);            cameraBuffer = new BitmapData(streamW, streamH, true, 0x0);            workBuffer = new BitmapData(workW, workH, true, 0x0);            cameraMatrix = new Matrix(downScaleRatio, 0, 0, downScaleRatio);        }    }}